name: Build and Push to AWS ECR

on:
  push:
    branches: [ "main" ]

env:
  # Umgebungsvariable für den ECR Registry URI
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # WICHTIG: Diese Berechtigungen sind für die sichere OIDC-Anmeldung erforderlich
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS Credentials
        # Diese Action tauscht ein GitHub Token gegen temporäre AWS-Credentials aus
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        # Meldet den Docker-Client bei ECR an
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          # Wir bauen das Image jetzt mit Maven, aber pushen es nicht automatisch
          ./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.group=${{ env.ECR_REGISTRY }}
          
          # Der Image-Name wird aus der application.properties genommen
          IMAGE_NAME=$(./mvnw help:evaluate -Dexpression=quarkus.container-image.name -q -DforceStdout)
          
          # Pushen des Images mit dem "latest" Tag
          docker push ${{ env.ECR_REGISTRY }}/${IMAGE_NAME}:latest